version: '3.9'
  
networks:
  default:
    name: "{{.Profile.Name}}-default"
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.102.0.0/16

services:
#Infraservices
  consul:
    image: "{{.Profile.Services.consul.Image}}"
    container_name: "{{.Profile.Services.consul.ContainerName}}"
    restart: "no"
    command: ["agent", "-server", "-ui", "-client=0.0.0.0", "-bind=127.0.0.1", "-retry-join=127.0.0.1", "-bootstrap-expect=1"]
    environment:
      CONSUL_LOCAL_CONFIG: >
        {
          "acl": {
            "enabled": true,
            "default_policy": "deny",
            "down_policy": "extend-cache",
            "tokens": {
              "master": "replace_with_token_value",
              "default": "replace_with_token_value"
            }
          }
        }
    ports:
      - "8500:8500/tcp"
      - "8300:8300/tcp"
      - "8400:8400/tcp"
      - "8301-8302:8301-8302/tcp"
      - "8301-8302:8301-8302/udp"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    volumes:
      - "{{.LocalDataDir}}/consul:/consul/data:delegated"
      
  vault:
    image: "{{.Profile.Services.vault.Image}}"
    container_name: "{{.Profile.Services.vault.ContainerName}}"
    restart: "no"
    command: ["server"]
    environment:
      SKIP_SETCAP: "true"
      VAULT_ADDR: "http://localhost:8200"
      VAULT_UI: "true"
      VAULT_LOCAL_CONFIG: >
        {
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": true,
              "tls_disable_client_certs": true
            }
          },
          "storage": {
            "file": {
              "path": "/vault/file/"
            }
          },
          "default_lease_ttl": "87600h",
          "max_lease_ttl": "876000h",
          "disable_clustering": true,
          "disable_mlock": true
        }
    ports:
      - "8200:8200"
    volumes:
      - "{{.LocalDataDir}}/vault/file:/vault/file:delegated"
      - "{{.LocalDataDir}}/vault/root-home:/root:delegated"

  redis:
    image: "{{.Profile.Services.redis.Image}}"
    container_name: "{{.Profile.Services.redis.ContainerName}}"
    restart: "no"
    ports:
      - "6379:6379"

  postgres:
    image: "{{.Profile.Services.postgres.Image}}"
    container_name: "{{.Profile.Services.postgres.ContainerName}}"
    restart: "no"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
      - "26257:5432" # To be compatible with CockroachDB
    volumes:
      - "{{.LocalDataDir}}/postgres:/var/lib/postgresql/data:delegated"

  zookeeper:
    image: "{{.Profile.Services.zookeeper.Image}}"
    container_name: "{{.Profile.Services.zookeeper.ContainerName}}"
    restart: "no"
    ports:
      - "2181:2181"

  kafka:
    image: "{{.Profile.Services.kafka.Image}}"
    container_name: "{{.Profile.Services.kafka.ContainerName}}"
    restart: "no"
    build:
      context: "{{.ResourceDir}}/kafka-wurstmeister"
      dockerfile: Dockerfile
      args:
        - "kafka_version={{.Profile.Services.kafka.BuildArgs.kafka_version}}"
        - "scala_version={{.Profile.Services.kafka.BuildArgs.scala_version}}"
        - "glibc_version={{.Profile.Services.kafka.BuildArgs.glibc_version}}"
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_MESSAGE_MAX_BYTES: 2000000
    depends_on:
      - zookeeper

  jaeger:
    image: "{{.Profile.Services.jaeger.Image}}"
    container_name: "{{.Profile.Services.jaeger.ContainerName}}"
    restart: "no"
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"


  # Post Start
  post-start-vault:
    image: "post-start:{{.Profile.Name}}-vault"
    container_name: "{{.Profile.Name}}-post-start-vault"
    build:
      context: "{{.ResourceDir}}/post-start"
      dockerfile: Dockerfile-Vault
      args:
        - "VAULT_IMAGE={{.Profile.Services.vault.Image}}"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: "replace_with_token_value"
    volumes:
      - "{{.LocalDataDir}}/vault/file:/vault/file:delegated"
    depends_on:
      - vault

  post-start-consul:
    image: "post-start:{{.Profile.Name}}-consul"
    container_name: "{{.Profile.Name}}-post-start-consul"
    build:
      context: "{{.ResourceDir}}/post-start"
      dockerfile: Dockerfile-Consul
      args:
        - "CONSUL_IMAGE={{.Profile.Services.consul.Image}}"
    depends_on:
      - consul

